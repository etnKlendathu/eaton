// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef PROTOBUF_INCLUDED_config_2eproto
#define PROTOBUF_INCLUDED_config_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_config_2eproto 

namespace protobuf_config_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_config_2eproto
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Config_Discovery;
class Config_DiscoveryDefaultTypeInternal;
extern Config_DiscoveryDefaultTypeInternal _Config_Discovery_default_instance_;
class Config_Discovery_DefaultValuesAuxEntry_DoNotUse;
class Config_Discovery_DefaultValuesAuxEntry_DoNotUseDefaultTypeInternal;
extern Config_Discovery_DefaultValuesAuxEntry_DoNotUseDefaultTypeInternal _Config_Discovery_DefaultValuesAuxEntry_DoNotUse_default_instance_;
class Config_Discovery_DefaultValuesExtEntry_DoNotUse;
class Config_Discovery_DefaultValuesExtEntry_DoNotUseDefaultTypeInternal;
extern Config_Discovery_DefaultValuesExtEntry_DoNotUseDefaultTypeInternal _Config_Discovery_DefaultValuesExtEntry_DoNotUse_default_instance_;
class Config_Discovery_Link;
class Config_Discovery_LinkDefaultTypeInternal;
extern Config_Discovery_LinkDefaultTypeInternal _Config_Discovery_Link_default_instance_;
class Config_Log;
class Config_LogDefaultTypeInternal;
extern Config_LogDefaultTypeInternal _Config_Log_default_instance_;
class Config_Parameters;
class Config_ParametersDefaultTypeInternal;
extern Config_ParametersDefaultTypeInternal _Config_Parameters_default_instance_;
class Config_Server;
class Config_ServerDefaultTypeInternal;
extern Config_ServerDefaultTypeInternal _Config_Server_default_instance_;
namespace google {
namespace protobuf {
template<> ::Config* Arena::CreateMaybeMessage<::Config>(Arena*);
template<> ::Config_Discovery* Arena::CreateMaybeMessage<::Config_Discovery>(Arena*);
template<> ::Config_Discovery_DefaultValuesAuxEntry_DoNotUse* Arena::CreateMaybeMessage<::Config_Discovery_DefaultValuesAuxEntry_DoNotUse>(Arena*);
template<> ::Config_Discovery_DefaultValuesExtEntry_DoNotUse* Arena::CreateMaybeMessage<::Config_Discovery_DefaultValuesExtEntry_DoNotUse>(Arena*);
template<> ::Config_Discovery_Link* Arena::CreateMaybeMessage<::Config_Discovery_Link>(Arena*);
template<> ::Config_Log* Arena::CreateMaybeMessage<::Config_Log>(Arena*);
template<> ::Config_Parameters* Arena::CreateMaybeMessage<::Config_Parameters>(Arena*);
template<> ::Config_Server* Arena::CreateMaybeMessage<::Config_Server>(Arena*);
}  // namespace protobuf
}  // namespace google

enum Config_Discovery_Type {
  Config_Discovery_Type_Unknown = 0,
  Config_Discovery_Type_LocalScan = 1,
  Config_Discovery_Type_MultiScan = 2,
  Config_Discovery_Type_IpScan = 3,
  Config_Discovery_Type_Config_Discovery_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Config_Discovery_Type_Config_Discovery_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Config_Discovery_Type_IsValid(int value);
const Config_Discovery_Type Config_Discovery_Type_Type_MIN = Config_Discovery_Type_Unknown;
const Config_Discovery_Type Config_Discovery_Type_Type_MAX = Config_Discovery_Type_IpScan;
const int Config_Discovery_Type_Type_ARRAYSIZE = Config_Discovery_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Config_Discovery_Type_descriptor();
inline const ::std::string& Config_Discovery_Type_Name(Config_Discovery_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Config_Discovery_Type_descriptor(), value);
}
inline bool Config_Discovery_Type_Parse(
    const ::std::string& name, Config_Discovery_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Config_Discovery_Type>(
    Config_Discovery_Type_descriptor(), name, value);
}
// ===================================================================

class Config_Server : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Config.Server) */ {
 public:
  Config_Server();
  virtual ~Config_Server();

  Config_Server(const Config_Server& from);

  inline Config_Server& operator=(const Config_Server& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config_Server(Config_Server&& from) noexcept
    : Config_Server() {
    *this = ::std::move(from);
  }

  inline Config_Server& operator=(Config_Server&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Config_Server& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config_Server* internal_default_instance() {
    return reinterpret_cast<const Config_Server*>(
               &_Config_Server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Config_Server* other);
  friend void swap(Config_Server& a, Config_Server& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config_Server* New() const final {
    return CreateMaybeMessage<Config_Server>(NULL);
  }

  Config_Server* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Config_Server>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Config_Server& from);
  void MergeFrom(const Config_Server& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config_Server* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string workdir = 3;
  void clear_workdir();
  static const int kWorkdirFieldNumber = 3;
  const ::std::string& workdir() const;
  void set_workdir(const ::std::string& value);
  #if LANG_CXX11
  void set_workdir(::std::string&& value);
  #endif
  void set_workdir(const char* value);
  void set_workdir(const char* value, size_t size);
  ::std::string* mutable_workdir();
  ::std::string* release_workdir();
  void set_allocated_workdir(::std::string* workdir);

  // int32 timeout = 1;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 1;
  ::google::protobuf::int32 timeout() const;
  void set_timeout(::google::protobuf::int32 value);

  // bool background = 2;
  void clear_background();
  static const int kBackgroundFieldNumber = 2;
  bool background() const;
  void set_background(bool value);

  // bool verbose = 4;
  void clear_verbose();
  static const int kVerboseFieldNumber = 4;
  bool verbose() const;
  void set_verbose(bool value);

  // @@protoc_insertion_point(class_scope:Config.Server)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr workdir_;
  ::google::protobuf::int32 timeout_;
  bool background_;
  bool verbose_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Config_Discovery_Link : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Config.Discovery.Link) */ {
 public:
  Config_Discovery_Link();
  virtual ~Config_Discovery_Link();

  Config_Discovery_Link(const Config_Discovery_Link& from);

  inline Config_Discovery_Link& operator=(const Config_Discovery_Link& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config_Discovery_Link(Config_Discovery_Link&& from) noexcept
    : Config_Discovery_Link() {
    *this = ::std::move(from);
  }

  inline Config_Discovery_Link& operator=(Config_Discovery_Link&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Config_Discovery_Link& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config_Discovery_Link* internal_default_instance() {
    return reinterpret_cast<const Config_Discovery_Link*>(
               &_Config_Discovery_Link_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Config_Discovery_Link* other);
  friend void swap(Config_Discovery_Link& a, Config_Discovery_Link& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config_Discovery_Link* New() const final {
    return CreateMaybeMessage<Config_Discovery_Link>(NULL);
  }

  Config_Discovery_Link* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Config_Discovery_Link>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Config_Discovery_Link& from);
  void MergeFrom(const Config_Discovery_Link& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config_Discovery_Link* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 src = 1;
  void clear_src();
  static const int kSrcFieldNumber = 1;
  ::google::protobuf::uint32 src() const;
  void set_src(::google::protobuf::uint32 value);

  // uint32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Config.Discovery.Link)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 src_;
  ::google::protobuf::uint32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Config_Discovery_DefaultValuesAuxEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Config_Discovery_DefaultValuesAuxEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Config_Discovery_DefaultValuesAuxEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Config_Discovery_DefaultValuesAuxEntry_DoNotUse();
  Config_Discovery_DefaultValuesAuxEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Config_Discovery_DefaultValuesAuxEntry_DoNotUse& other);
  static const Config_Discovery_DefaultValuesAuxEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Config_Discovery_DefaultValuesAuxEntry_DoNotUse*>(&_Config_Discovery_DefaultValuesAuxEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Config_Discovery_DefaultValuesExtEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Config_Discovery_DefaultValuesExtEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Config_Discovery_DefaultValuesExtEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Config_Discovery_DefaultValuesExtEntry_DoNotUse();
  Config_Discovery_DefaultValuesExtEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Config_Discovery_DefaultValuesExtEntry_DoNotUse& other);
  static const Config_Discovery_DefaultValuesExtEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Config_Discovery_DefaultValuesExtEntry_DoNotUse*>(&_Config_Discovery_DefaultValuesExtEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Config_Discovery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Config.Discovery) */ {
 public:
  Config_Discovery();
  virtual ~Config_Discovery();

  Config_Discovery(const Config_Discovery& from);

  inline Config_Discovery& operator=(const Config_Discovery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config_Discovery(Config_Discovery&& from) noexcept
    : Config_Discovery() {
    *this = ::std::move(from);
  }

  inline Config_Discovery& operator=(Config_Discovery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Config_Discovery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config_Discovery* internal_default_instance() {
    return reinterpret_cast<const Config_Discovery*>(
               &_Config_Discovery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Config_Discovery* other);
  friend void swap(Config_Discovery& a, Config_Discovery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config_Discovery* New() const final {
    return CreateMaybeMessage<Config_Discovery>(NULL);
  }

  Config_Discovery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Config_Discovery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Config_Discovery& from);
  void MergeFrom(const Config_Discovery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config_Discovery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Config_Discovery_Link Link;

  typedef Config_Discovery_Type Type;
  static const Type Unknown =
    Config_Discovery_Type_Unknown;
  static const Type LocalScan =
    Config_Discovery_Type_LocalScan;
  static const Type MultiScan =
    Config_Discovery_Type_MultiScan;
  static const Type IpScan =
    Config_Discovery_Type_IpScan;
  static inline bool Type_IsValid(int value) {
    return Config_Discovery_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Config_Discovery_Type_Type_MIN;
  static const Type Type_MAX =
    Config_Discovery_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Config_Discovery_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Config_Discovery_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Config_Discovery_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Config_Discovery_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string scans = 2;
  int scans_size() const;
  void clear_scans();
  static const int kScansFieldNumber = 2;
  const ::std::string& scans(int index) const;
  ::std::string* mutable_scans(int index);
  void set_scans(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_scans(int index, ::std::string&& value);
  #endif
  void set_scans(int index, const char* value);
  void set_scans(int index, const char* value, size_t size);
  ::std::string* add_scans();
  void add_scans(const ::std::string& value);
  #if LANG_CXX11
  void add_scans(::std::string&& value);
  #endif
  void add_scans(const char* value);
  void add_scans(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& scans() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_scans();

  // repeated string ips = 3;
  int ips_size() const;
  void clear_ips();
  static const int kIpsFieldNumber = 3;
  const ::std::string& ips(int index) const;
  ::std::string* mutable_ips(int index);
  void set_ips(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ips(int index, ::std::string&& value);
  #endif
  void set_ips(int index, const char* value);
  void set_ips(int index, const char* value, size_t size);
  ::std::string* add_ips();
  void add_ips(const ::std::string& value);
  #if LANG_CXX11
  void add_ips(::std::string&& value);
  #endif
  void add_ips(const char* value);
  void add_ips(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ips() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ips();

  // repeated string documents = 6;
  int documents_size() const;
  void clear_documents();
  static const int kDocumentsFieldNumber = 6;
  const ::std::string& documents(int index) const;
  ::std::string* mutable_documents(int index);
  void set_documents(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_documents(int index, ::std::string&& value);
  #endif
  void set_documents(int index, const char* value);
  void set_documents(int index, const char* value, size_t size);
  ::std::string* add_documents();
  void add_documents(const ::std::string& value);
  #if LANG_CXX11
  void add_documents(::std::string&& value);
  #endif
  void add_documents(const char* value);
  void add_documents(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& documents() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_documents();

  // map<string, string> defaultValuesAux = 7;
  int defaultvaluesaux_size() const;
  void clear_defaultvaluesaux();
  static const int kDefaultValuesAuxFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      defaultvaluesaux() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_defaultvaluesaux();

  // map<string, string> defaultValuesExt = 8;
  int defaultvaluesext_size() const;
  void clear_defaultvaluesext();
  static const int kDefaultValuesExtFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      defaultvaluesext() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_defaultvaluesext();

  // repeated .Config.Discovery.Link defaultValuesLinks = 9;
  int defaultvalueslinks_size() const;
  void clear_defaultvalueslinks();
  static const int kDefaultValuesLinksFieldNumber = 9;
  ::Config_Discovery_Link* mutable_defaultvalueslinks(int index);
  ::google::protobuf::RepeatedPtrField< ::Config_Discovery_Link >*
      mutable_defaultvalueslinks();
  const ::Config_Discovery_Link& defaultvalueslinks(int index) const;
  ::Config_Discovery_Link* add_defaultvalueslinks();
  const ::google::protobuf::RepeatedPtrField< ::Config_Discovery_Link >&
      defaultvalueslinks() const;

  // string scanNumber = 4;
  void clear_scannumber();
  static const int kScanNumberFieldNumber = 4;
  const ::std::string& scannumber() const;
  void set_scannumber(const ::std::string& value);
  #if LANG_CXX11
  void set_scannumber(::std::string&& value);
  #endif
  void set_scannumber(const char* value);
  void set_scannumber(const char* value, size_t size);
  ::std::string* mutable_scannumber();
  ::std::string* release_scannumber();
  void set_allocated_scannumber(::std::string* scannumber);

  // string ipNumber = 5;
  void clear_ipnumber();
  static const int kIpNumberFieldNumber = 5;
  const ::std::string& ipnumber() const;
  void set_ipnumber(const ::std::string& value);
  #if LANG_CXX11
  void set_ipnumber(::std::string&& value);
  #endif
  void set_ipnumber(const char* value);
  void set_ipnumber(const char* value, size_t size);
  ::std::string* mutable_ipnumber();
  ::std::string* release_ipnumber();
  void set_allocated_ipnumber(::std::string* ipnumber);

  // .Config.Discovery.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Config_Discovery_Type type() const;
  void set_type(::Config_Discovery_Type value);

  // @@protoc_insertion_point(class_scope:Config.Discovery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> scans_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ips_;
  ::google::protobuf::RepeatedPtrField< ::std::string> documents_;
  ::google::protobuf::internal::MapField<
      Config_Discovery_DefaultValuesAuxEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > defaultvaluesaux_;
  ::google::protobuf::internal::MapField<
      Config_Discovery_DefaultValuesExtEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > defaultvaluesext_;
  ::google::protobuf::RepeatedPtrField< ::Config_Discovery_Link > defaultvalueslinks_;
  ::google::protobuf::internal::ArenaStringPtr scannumber_;
  ::google::protobuf::internal::ArenaStringPtr ipnumber_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Config_Parameters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Config.Parameters) */ {
 public:
  Config_Parameters();
  virtual ~Config_Parameters();

  Config_Parameters(const Config_Parameters& from);

  inline Config_Parameters& operator=(const Config_Parameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config_Parameters(Config_Parameters&& from) noexcept
    : Config_Parameters() {
    *this = ::std::move(from);
  }

  inline Config_Parameters& operator=(Config_Parameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Config_Parameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config_Parameters* internal_default_instance() {
    return reinterpret_cast<const Config_Parameters*>(
               &_Config_Parameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Config_Parameters* other);
  friend void swap(Config_Parameters& a, Config_Parameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config_Parameters* New() const final {
    return CreateMaybeMessage<Config_Parameters>(NULL);
  }

  Config_Parameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Config_Parameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Config_Parameters& from);
  void MergeFrom(const Config_Parameters& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config_Parameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mappingFile = 1;
  void clear_mappingfile();
  static const int kMappingFileFieldNumber = 1;
  const ::std::string& mappingfile() const;
  void set_mappingfile(const ::std::string& value);
  #if LANG_CXX11
  void set_mappingfile(::std::string&& value);
  #endif
  void set_mappingfile(const char* value);
  void set_mappingfile(const char* value, size_t size);
  ::std::string* mutable_mappingfile();
  ::std::string* release_mappingfile();
  void set_allocated_mappingfile(::std::string* mappingfile);

  // int32 maxDumpPoolNumber = 2 [(.int32_DefaultValue) = 15];
  void clear_maxdumppoolnumber();
  static const int kMaxDumpPoolNumberFieldNumber = 2;
  ::google::protobuf::int32 maxdumppoolnumber() const;
  void set_maxdumppoolnumber(::google::protobuf::int32 value);

  // int32 maxScanPoolNumber = 3 [(.int32_DefaultValue) = 4];
  void clear_maxscanpoolnumber();
  static const int kMaxScanPoolNumberFieldNumber = 3;
  ::google::protobuf::int32 maxscanpoolnumber() const;
  void set_maxscanpoolnumber(::google::protobuf::int32 value);

  // int32 nutScannerTimeOut = 4 [(.int32_DefaultValue) = 20];
  void clear_nutscannertimeout();
  static const int kNutScannerTimeOutFieldNumber = 4;
  ::google::protobuf::int32 nutscannertimeout() const;
  void set_nutscannertimeout(::google::protobuf::int32 value);

  // int32 dumpDataLoopTime = 5 [(.int32_DefaultValue) = 30];
  void clear_dumpdatalooptime();
  static const int kDumpDataLoopTimeFieldNumber = 5;
  ::google::protobuf::int32 dumpdatalooptime() const;
  void set_dumpdatalooptime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.Parameters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mappingfile_;
  ::google::protobuf::int32 maxdumppoolnumber_;
  ::google::protobuf::int32 maxscanpoolnumber_;
  ::google::protobuf::int32 nutscannertimeout_;
  ::google::protobuf::int32 dumpdatalooptime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Config_Log : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Config.Log) */ {
 public:
  Config_Log();
  virtual ~Config_Log();

  Config_Log(const Config_Log& from);

  inline Config_Log& operator=(const Config_Log& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config_Log(Config_Log&& from) noexcept
    : Config_Log() {
    *this = ::std::move(from);
  }

  inline Config_Log& operator=(Config_Log&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Config_Log& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config_Log* internal_default_instance() {
    return reinterpret_cast<const Config_Log*>(
               &_Config_Log_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Config_Log* other);
  friend void swap(Config_Log& a, Config_Log& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config_Log* New() const final {
    return CreateMaybeMessage<Config_Log>(NULL);
  }

  Config_Log* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Config_Log>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Config_Log& from);
  void MergeFrom(const Config_Log& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config_Log* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string config = 1 [(.string_DefaultValue) = "/etc/fty/ftylog.cfg"];
  void clear_config();
  static const int kConfigFieldNumber = 1;
  const ::std::string& config() const;
  void set_config(const ::std::string& value);
  #if LANG_CXX11
  void set_config(::std::string&& value);
  #endif
  void set_config(const char* value);
  void set_config(const char* value, size_t size);
  ::std::string* mutable_config();
  ::std::string* release_config();
  void set_allocated_config(::std::string* config);

  // @@protoc_insertion_point(class_scope:Config.Log)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Config* other);
  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(NULL);
  }

  Config* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Config_Server Server;
  typedef Config_Discovery Discovery;
  typedef Config_Parameters Parameters;
  typedef Config_Log Log;

  // accessors -------------------------------------------------------

  // .Config.Server server = 1;
  bool has_server() const;
  void clear_server();
  static const int kServerFieldNumber = 1;
  private:
  const ::Config_Server& _internal_server() const;
  public:
  const ::Config_Server& server() const;
  ::Config_Server* release_server();
  ::Config_Server* mutable_server();
  void set_allocated_server(::Config_Server* server);

  // .Config.Discovery discovery = 2;
  bool has_discovery() const;
  void clear_discovery();
  static const int kDiscoveryFieldNumber = 2;
  private:
  const ::Config_Discovery& _internal_discovery() const;
  public:
  const ::Config_Discovery& discovery() const;
  ::Config_Discovery* release_discovery();
  ::Config_Discovery* mutable_discovery();
  void set_allocated_discovery(::Config_Discovery* discovery);

  // .Config.Parameters parameters = 3;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 3;
  private:
  const ::Config_Parameters& _internal_parameters() const;
  public:
  const ::Config_Parameters& parameters() const;
  ::Config_Parameters* release_parameters();
  ::Config_Parameters* mutable_parameters();
  void set_allocated_parameters(::Config_Parameters* parameters);

  // .Config.Log log = 4;
  bool has_log() const;
  void clear_log();
  static const int kLogFieldNumber = 4;
  private:
  const ::Config_Log& _internal_log() const;
  public:
  const ::Config_Log& log() const;
  ::Config_Log* release_log();
  ::Config_Log* mutable_log();
  void set_allocated_log(::Config_Log* log);

  // @@protoc_insertion_point(class_scope:Config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Config_Server* server_;
  ::Config_Discovery* discovery_;
  ::Config_Parameters* parameters_;
  ::Config_Log* log_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_config_2eproto::TableStruct;
};
// ===================================================================

static const int kInt32DefaultValueFieldNumber = 51234;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  int32_DefaultValue;
static const int kStringDefaultValueFieldNumber = 51235;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  string_DefaultValue;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Config_Server

// int32 timeout = 1;
inline void Config_Server::clear_timeout() {
  timeout_ = 0;
}
inline ::google::protobuf::int32 Config_Server::timeout() const {
  // @@protoc_insertion_point(field_get:Config.Server.timeout)
  return timeout_;
}
inline void Config_Server::set_timeout(::google::protobuf::int32 value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:Config.Server.timeout)
}

// bool background = 2;
inline void Config_Server::clear_background() {
  background_ = false;
}
inline bool Config_Server::background() const {
  // @@protoc_insertion_point(field_get:Config.Server.background)
  return background_;
}
inline void Config_Server::set_background(bool value) {
  
  background_ = value;
  // @@protoc_insertion_point(field_set:Config.Server.background)
}

// string workdir = 3;
inline void Config_Server::clear_workdir() {
  workdir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Config_Server::workdir() const {
  // @@protoc_insertion_point(field_get:Config.Server.workdir)
  return workdir_.GetNoArena();
}
inline void Config_Server::set_workdir(const ::std::string& value) {
  
  workdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Config.Server.workdir)
}
#if LANG_CXX11
inline void Config_Server::set_workdir(::std::string&& value) {
  
  workdir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Config.Server.workdir)
}
#endif
inline void Config_Server::set_workdir(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  workdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Config.Server.workdir)
}
inline void Config_Server::set_workdir(const char* value, size_t size) {
  
  workdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Config.Server.workdir)
}
inline ::std::string* Config_Server::mutable_workdir() {
  
  // @@protoc_insertion_point(field_mutable:Config.Server.workdir)
  return workdir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config_Server::release_workdir() {
  // @@protoc_insertion_point(field_release:Config.Server.workdir)
  
  return workdir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config_Server::set_allocated_workdir(::std::string* workdir) {
  if (workdir != NULL) {
    
  } else {
    
  }
  workdir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workdir);
  // @@protoc_insertion_point(field_set_allocated:Config.Server.workdir)
}

// bool verbose = 4;
inline void Config_Server::clear_verbose() {
  verbose_ = false;
}
inline bool Config_Server::verbose() const {
  // @@protoc_insertion_point(field_get:Config.Server.verbose)
  return verbose_;
}
inline void Config_Server::set_verbose(bool value) {
  
  verbose_ = value;
  // @@protoc_insertion_point(field_set:Config.Server.verbose)
}

// -------------------------------------------------------------------

// Config_Discovery_Link

// uint32 src = 1;
inline void Config_Discovery_Link::clear_src() {
  src_ = 0u;
}
inline ::google::protobuf::uint32 Config_Discovery_Link::src() const {
  // @@protoc_insertion_point(field_get:Config.Discovery.Link.src)
  return src_;
}
inline void Config_Discovery_Link::set_src(::google::protobuf::uint32 value) {
  
  src_ = value;
  // @@protoc_insertion_point(field_set:Config.Discovery.Link.src)
}

// uint32 type = 2;
inline void Config_Discovery_Link::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 Config_Discovery_Link::type() const {
  // @@protoc_insertion_point(field_get:Config.Discovery.Link.type)
  return type_;
}
inline void Config_Discovery_Link::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Config.Discovery.Link.type)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Config_Discovery

// .Config.Discovery.Type type = 1;
inline void Config_Discovery::clear_type() {
  type_ = 0;
}
inline ::Config_Discovery_Type Config_Discovery::type() const {
  // @@protoc_insertion_point(field_get:Config.Discovery.type)
  return static_cast< ::Config_Discovery_Type >(type_);
}
inline void Config_Discovery::set_type(::Config_Discovery_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Config.Discovery.type)
}

// repeated string scans = 2;
inline int Config_Discovery::scans_size() const {
  return scans_.size();
}
inline void Config_Discovery::clear_scans() {
  scans_.Clear();
}
inline const ::std::string& Config_Discovery::scans(int index) const {
  // @@protoc_insertion_point(field_get:Config.Discovery.scans)
  return scans_.Get(index);
}
inline ::std::string* Config_Discovery::mutable_scans(int index) {
  // @@protoc_insertion_point(field_mutable:Config.Discovery.scans)
  return scans_.Mutable(index);
}
inline void Config_Discovery::set_scans(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Config.Discovery.scans)
  scans_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Config_Discovery::set_scans(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Config.Discovery.scans)
  scans_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Config_Discovery::set_scans(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  scans_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Config.Discovery.scans)
}
inline void Config_Discovery::set_scans(int index, const char* value, size_t size) {
  scans_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Config.Discovery.scans)
}
inline ::std::string* Config_Discovery::add_scans() {
  // @@protoc_insertion_point(field_add_mutable:Config.Discovery.scans)
  return scans_.Add();
}
inline void Config_Discovery::add_scans(const ::std::string& value) {
  scans_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Config.Discovery.scans)
}
#if LANG_CXX11
inline void Config_Discovery::add_scans(::std::string&& value) {
  scans_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Config.Discovery.scans)
}
#endif
inline void Config_Discovery::add_scans(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  scans_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Config.Discovery.scans)
}
inline void Config_Discovery::add_scans(const char* value, size_t size) {
  scans_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Config.Discovery.scans)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Config_Discovery::scans() const {
  // @@protoc_insertion_point(field_list:Config.Discovery.scans)
  return scans_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Config_Discovery::mutable_scans() {
  // @@protoc_insertion_point(field_mutable_list:Config.Discovery.scans)
  return &scans_;
}

// repeated string ips = 3;
inline int Config_Discovery::ips_size() const {
  return ips_.size();
}
inline void Config_Discovery::clear_ips() {
  ips_.Clear();
}
inline const ::std::string& Config_Discovery::ips(int index) const {
  // @@protoc_insertion_point(field_get:Config.Discovery.ips)
  return ips_.Get(index);
}
inline ::std::string* Config_Discovery::mutable_ips(int index) {
  // @@protoc_insertion_point(field_mutable:Config.Discovery.ips)
  return ips_.Mutable(index);
}
inline void Config_Discovery::set_ips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Config.Discovery.ips)
  ips_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Config_Discovery::set_ips(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Config.Discovery.ips)
  ips_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Config_Discovery::set_ips(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Config.Discovery.ips)
}
inline void Config_Discovery::set_ips(int index, const char* value, size_t size) {
  ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Config.Discovery.ips)
}
inline ::std::string* Config_Discovery::add_ips() {
  // @@protoc_insertion_point(field_add_mutable:Config.Discovery.ips)
  return ips_.Add();
}
inline void Config_Discovery::add_ips(const ::std::string& value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Config.Discovery.ips)
}
#if LANG_CXX11
inline void Config_Discovery::add_ips(::std::string&& value) {
  ips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Config.Discovery.ips)
}
#endif
inline void Config_Discovery::add_ips(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Config.Discovery.ips)
}
inline void Config_Discovery::add_ips(const char* value, size_t size) {
  ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Config.Discovery.ips)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Config_Discovery::ips() const {
  // @@protoc_insertion_point(field_list:Config.Discovery.ips)
  return ips_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Config_Discovery::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:Config.Discovery.ips)
  return &ips_;
}

// string scanNumber = 4;
inline void Config_Discovery::clear_scannumber() {
  scannumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Config_Discovery::scannumber() const {
  // @@protoc_insertion_point(field_get:Config.Discovery.scanNumber)
  return scannumber_.GetNoArena();
}
inline void Config_Discovery::set_scannumber(const ::std::string& value) {
  
  scannumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Config.Discovery.scanNumber)
}
#if LANG_CXX11
inline void Config_Discovery::set_scannumber(::std::string&& value) {
  
  scannumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Config.Discovery.scanNumber)
}
#endif
inline void Config_Discovery::set_scannumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scannumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Config.Discovery.scanNumber)
}
inline void Config_Discovery::set_scannumber(const char* value, size_t size) {
  
  scannumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Config.Discovery.scanNumber)
}
inline ::std::string* Config_Discovery::mutable_scannumber() {
  
  // @@protoc_insertion_point(field_mutable:Config.Discovery.scanNumber)
  return scannumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config_Discovery::release_scannumber() {
  // @@protoc_insertion_point(field_release:Config.Discovery.scanNumber)
  
  return scannumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config_Discovery::set_allocated_scannumber(::std::string* scannumber) {
  if (scannumber != NULL) {
    
  } else {
    
  }
  scannumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scannumber);
  // @@protoc_insertion_point(field_set_allocated:Config.Discovery.scanNumber)
}

// string ipNumber = 5;
inline void Config_Discovery::clear_ipnumber() {
  ipnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Config_Discovery::ipnumber() const {
  // @@protoc_insertion_point(field_get:Config.Discovery.ipNumber)
  return ipnumber_.GetNoArena();
}
inline void Config_Discovery::set_ipnumber(const ::std::string& value) {
  
  ipnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Config.Discovery.ipNumber)
}
#if LANG_CXX11
inline void Config_Discovery::set_ipnumber(::std::string&& value) {
  
  ipnumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Config.Discovery.ipNumber)
}
#endif
inline void Config_Discovery::set_ipnumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Config.Discovery.ipNumber)
}
inline void Config_Discovery::set_ipnumber(const char* value, size_t size) {
  
  ipnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Config.Discovery.ipNumber)
}
inline ::std::string* Config_Discovery::mutable_ipnumber() {
  
  // @@protoc_insertion_point(field_mutable:Config.Discovery.ipNumber)
  return ipnumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config_Discovery::release_ipnumber() {
  // @@protoc_insertion_point(field_release:Config.Discovery.ipNumber)
  
  return ipnumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config_Discovery::set_allocated_ipnumber(::std::string* ipnumber) {
  if (ipnumber != NULL) {
    
  } else {
    
  }
  ipnumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipnumber);
  // @@protoc_insertion_point(field_set_allocated:Config.Discovery.ipNumber)
}

// repeated string documents = 6;
inline int Config_Discovery::documents_size() const {
  return documents_.size();
}
inline void Config_Discovery::clear_documents() {
  documents_.Clear();
}
inline const ::std::string& Config_Discovery::documents(int index) const {
  // @@protoc_insertion_point(field_get:Config.Discovery.documents)
  return documents_.Get(index);
}
inline ::std::string* Config_Discovery::mutable_documents(int index) {
  // @@protoc_insertion_point(field_mutable:Config.Discovery.documents)
  return documents_.Mutable(index);
}
inline void Config_Discovery::set_documents(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Config.Discovery.documents)
  documents_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Config_Discovery::set_documents(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Config.Discovery.documents)
  documents_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Config_Discovery::set_documents(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  documents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Config.Discovery.documents)
}
inline void Config_Discovery::set_documents(int index, const char* value, size_t size) {
  documents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Config.Discovery.documents)
}
inline ::std::string* Config_Discovery::add_documents() {
  // @@protoc_insertion_point(field_add_mutable:Config.Discovery.documents)
  return documents_.Add();
}
inline void Config_Discovery::add_documents(const ::std::string& value) {
  documents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Config.Discovery.documents)
}
#if LANG_CXX11
inline void Config_Discovery::add_documents(::std::string&& value) {
  documents_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Config.Discovery.documents)
}
#endif
inline void Config_Discovery::add_documents(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  documents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Config.Discovery.documents)
}
inline void Config_Discovery::add_documents(const char* value, size_t size) {
  documents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Config.Discovery.documents)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Config_Discovery::documents() const {
  // @@protoc_insertion_point(field_list:Config.Discovery.documents)
  return documents_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Config_Discovery::mutable_documents() {
  // @@protoc_insertion_point(field_mutable_list:Config.Discovery.documents)
  return &documents_;
}

// map<string, string> defaultValuesAux = 7;
inline int Config_Discovery::defaultvaluesaux_size() const {
  return defaultvaluesaux_.size();
}
inline void Config_Discovery::clear_defaultvaluesaux() {
  defaultvaluesaux_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Config_Discovery::defaultvaluesaux() const {
  // @@protoc_insertion_point(field_map:Config.Discovery.defaultValuesAux)
  return defaultvaluesaux_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Config_Discovery::mutable_defaultvaluesaux() {
  // @@protoc_insertion_point(field_mutable_map:Config.Discovery.defaultValuesAux)
  return defaultvaluesaux_.MutableMap();
}

// map<string, string> defaultValuesExt = 8;
inline int Config_Discovery::defaultvaluesext_size() const {
  return defaultvaluesext_.size();
}
inline void Config_Discovery::clear_defaultvaluesext() {
  defaultvaluesext_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Config_Discovery::defaultvaluesext() const {
  // @@protoc_insertion_point(field_map:Config.Discovery.defaultValuesExt)
  return defaultvaluesext_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Config_Discovery::mutable_defaultvaluesext() {
  // @@protoc_insertion_point(field_mutable_map:Config.Discovery.defaultValuesExt)
  return defaultvaluesext_.MutableMap();
}

// repeated .Config.Discovery.Link defaultValuesLinks = 9;
inline int Config_Discovery::defaultvalueslinks_size() const {
  return defaultvalueslinks_.size();
}
inline void Config_Discovery::clear_defaultvalueslinks() {
  defaultvalueslinks_.Clear();
}
inline ::Config_Discovery_Link* Config_Discovery::mutable_defaultvalueslinks(int index) {
  // @@protoc_insertion_point(field_mutable:Config.Discovery.defaultValuesLinks)
  return defaultvalueslinks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Config_Discovery_Link >*
Config_Discovery::mutable_defaultvalueslinks() {
  // @@protoc_insertion_point(field_mutable_list:Config.Discovery.defaultValuesLinks)
  return &defaultvalueslinks_;
}
inline const ::Config_Discovery_Link& Config_Discovery::defaultvalueslinks(int index) const {
  // @@protoc_insertion_point(field_get:Config.Discovery.defaultValuesLinks)
  return defaultvalueslinks_.Get(index);
}
inline ::Config_Discovery_Link* Config_Discovery::add_defaultvalueslinks() {
  // @@protoc_insertion_point(field_add:Config.Discovery.defaultValuesLinks)
  return defaultvalueslinks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Config_Discovery_Link >&
Config_Discovery::defaultvalueslinks() const {
  // @@protoc_insertion_point(field_list:Config.Discovery.defaultValuesLinks)
  return defaultvalueslinks_;
}

// -------------------------------------------------------------------

// Config_Parameters

// string mappingFile = 1;
inline void Config_Parameters::clear_mappingfile() {
  mappingfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Config_Parameters::mappingfile() const {
  // @@protoc_insertion_point(field_get:Config.Parameters.mappingFile)
  return mappingfile_.GetNoArena();
}
inline void Config_Parameters::set_mappingfile(const ::std::string& value) {
  
  mappingfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Config.Parameters.mappingFile)
}
#if LANG_CXX11
inline void Config_Parameters::set_mappingfile(::std::string&& value) {
  
  mappingfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Config.Parameters.mappingFile)
}
#endif
inline void Config_Parameters::set_mappingfile(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mappingfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Config.Parameters.mappingFile)
}
inline void Config_Parameters::set_mappingfile(const char* value, size_t size) {
  
  mappingfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Config.Parameters.mappingFile)
}
inline ::std::string* Config_Parameters::mutable_mappingfile() {
  
  // @@protoc_insertion_point(field_mutable:Config.Parameters.mappingFile)
  return mappingfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config_Parameters::release_mappingfile() {
  // @@protoc_insertion_point(field_release:Config.Parameters.mappingFile)
  
  return mappingfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config_Parameters::set_allocated_mappingfile(::std::string* mappingfile) {
  if (mappingfile != NULL) {
    
  } else {
    
  }
  mappingfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mappingfile);
  // @@protoc_insertion_point(field_set_allocated:Config.Parameters.mappingFile)
}

// int32 maxDumpPoolNumber = 2 [(.int32_DefaultValue) = 15];
inline void Config_Parameters::clear_maxdumppoolnumber() {
  maxdumppoolnumber_ = 0;
}
inline ::google::protobuf::int32 Config_Parameters::maxdumppoolnumber() const {
  // @@protoc_insertion_point(field_get:Config.Parameters.maxDumpPoolNumber)
  return maxdumppoolnumber_;
}
inline void Config_Parameters::set_maxdumppoolnumber(::google::protobuf::int32 value) {
  
  maxdumppoolnumber_ = value;
  // @@protoc_insertion_point(field_set:Config.Parameters.maxDumpPoolNumber)
}

// int32 maxScanPoolNumber = 3 [(.int32_DefaultValue) = 4];
inline void Config_Parameters::clear_maxscanpoolnumber() {
  maxscanpoolnumber_ = 0;
}
inline ::google::protobuf::int32 Config_Parameters::maxscanpoolnumber() const {
  // @@protoc_insertion_point(field_get:Config.Parameters.maxScanPoolNumber)
  return maxscanpoolnumber_;
}
inline void Config_Parameters::set_maxscanpoolnumber(::google::protobuf::int32 value) {
  
  maxscanpoolnumber_ = value;
  // @@protoc_insertion_point(field_set:Config.Parameters.maxScanPoolNumber)
}

// int32 nutScannerTimeOut = 4 [(.int32_DefaultValue) = 20];
inline void Config_Parameters::clear_nutscannertimeout() {
  nutscannertimeout_ = 0;
}
inline ::google::protobuf::int32 Config_Parameters::nutscannertimeout() const {
  // @@protoc_insertion_point(field_get:Config.Parameters.nutScannerTimeOut)
  return nutscannertimeout_;
}
inline void Config_Parameters::set_nutscannertimeout(::google::protobuf::int32 value) {
  
  nutscannertimeout_ = value;
  // @@protoc_insertion_point(field_set:Config.Parameters.nutScannerTimeOut)
}

// int32 dumpDataLoopTime = 5 [(.int32_DefaultValue) = 30];
inline void Config_Parameters::clear_dumpdatalooptime() {
  dumpdatalooptime_ = 0;
}
inline ::google::protobuf::int32 Config_Parameters::dumpdatalooptime() const {
  // @@protoc_insertion_point(field_get:Config.Parameters.dumpDataLoopTime)
  return dumpdatalooptime_;
}
inline void Config_Parameters::set_dumpdatalooptime(::google::protobuf::int32 value) {
  
  dumpdatalooptime_ = value;
  // @@protoc_insertion_point(field_set:Config.Parameters.dumpDataLoopTime)
}

// -------------------------------------------------------------------

// Config_Log

// string config = 1 [(.string_DefaultValue) = "/etc/fty/ftylog.cfg"];
inline void Config_Log::clear_config() {
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Config_Log::config() const {
  // @@protoc_insertion_point(field_get:Config.Log.config)
  return config_.GetNoArena();
}
inline void Config_Log::set_config(const ::std::string& value) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Config.Log.config)
}
#if LANG_CXX11
inline void Config_Log::set_config(::std::string&& value) {
  
  config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Config.Log.config)
}
#endif
inline void Config_Log::set_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Config.Log.config)
}
inline void Config_Log::set_config(const char* value, size_t size) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Config.Log.config)
}
inline ::std::string* Config_Log::mutable_config() {
  
  // @@protoc_insertion_point(field_mutable:Config.Log.config)
  return config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config_Log::release_config() {
  // @@protoc_insertion_point(field_release:Config.Log.config)
  
  return config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config_Log::set_allocated_config(::std::string* config) {
  if (config != NULL) {
    
  } else {
    
  }
  config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config);
  // @@protoc_insertion_point(field_set_allocated:Config.Log.config)
}

// -------------------------------------------------------------------

// Config

// .Config.Server server = 1;
inline bool Config::has_server() const {
  return this != internal_default_instance() && server_ != NULL;
}
inline void Config::clear_server() {
  if (GetArenaNoVirtual() == NULL && server_ != NULL) {
    delete server_;
  }
  server_ = NULL;
}
inline const ::Config_Server& Config::_internal_server() const {
  return *server_;
}
inline const ::Config_Server& Config::server() const {
  const ::Config_Server* p = server_;
  // @@protoc_insertion_point(field_get:Config.server)
  return p != NULL ? *p : *reinterpret_cast<const ::Config_Server*>(
      &::_Config_Server_default_instance_);
}
inline ::Config_Server* Config::release_server() {
  // @@protoc_insertion_point(field_release:Config.server)
  
  ::Config_Server* temp = server_;
  server_ = NULL;
  return temp;
}
inline ::Config_Server* Config::mutable_server() {
  
  if (server_ == NULL) {
    auto* p = CreateMaybeMessage<::Config_Server>(GetArenaNoVirtual());
    server_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Config.server)
  return server_;
}
inline void Config::set_allocated_server(::Config_Server* server) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete server_;
  }
  if (server) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      server = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    
  } else {
    
  }
  server_ = server;
  // @@protoc_insertion_point(field_set_allocated:Config.server)
}

// .Config.Discovery discovery = 2;
inline bool Config::has_discovery() const {
  return this != internal_default_instance() && discovery_ != NULL;
}
inline void Config::clear_discovery() {
  if (GetArenaNoVirtual() == NULL && discovery_ != NULL) {
    delete discovery_;
  }
  discovery_ = NULL;
}
inline const ::Config_Discovery& Config::_internal_discovery() const {
  return *discovery_;
}
inline const ::Config_Discovery& Config::discovery() const {
  const ::Config_Discovery* p = discovery_;
  // @@protoc_insertion_point(field_get:Config.discovery)
  return p != NULL ? *p : *reinterpret_cast<const ::Config_Discovery*>(
      &::_Config_Discovery_default_instance_);
}
inline ::Config_Discovery* Config::release_discovery() {
  // @@protoc_insertion_point(field_release:Config.discovery)
  
  ::Config_Discovery* temp = discovery_;
  discovery_ = NULL;
  return temp;
}
inline ::Config_Discovery* Config::mutable_discovery() {
  
  if (discovery_ == NULL) {
    auto* p = CreateMaybeMessage<::Config_Discovery>(GetArenaNoVirtual());
    discovery_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Config.discovery)
  return discovery_;
}
inline void Config::set_allocated_discovery(::Config_Discovery* discovery) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete discovery_;
  }
  if (discovery) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      discovery = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, discovery, submessage_arena);
    }
    
  } else {
    
  }
  discovery_ = discovery;
  // @@protoc_insertion_point(field_set_allocated:Config.discovery)
}

// .Config.Parameters parameters = 3;
inline bool Config::has_parameters() const {
  return this != internal_default_instance() && parameters_ != NULL;
}
inline void Config::clear_parameters() {
  if (GetArenaNoVirtual() == NULL && parameters_ != NULL) {
    delete parameters_;
  }
  parameters_ = NULL;
}
inline const ::Config_Parameters& Config::_internal_parameters() const {
  return *parameters_;
}
inline const ::Config_Parameters& Config::parameters() const {
  const ::Config_Parameters* p = parameters_;
  // @@protoc_insertion_point(field_get:Config.parameters)
  return p != NULL ? *p : *reinterpret_cast<const ::Config_Parameters*>(
      &::_Config_Parameters_default_instance_);
}
inline ::Config_Parameters* Config::release_parameters() {
  // @@protoc_insertion_point(field_release:Config.parameters)
  
  ::Config_Parameters* temp = parameters_;
  parameters_ = NULL;
  return temp;
}
inline ::Config_Parameters* Config::mutable_parameters() {
  
  if (parameters_ == NULL) {
    auto* p = CreateMaybeMessage<::Config_Parameters>(GetArenaNoVirtual());
    parameters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Config.parameters)
  return parameters_;
}
inline void Config::set_allocated_parameters(::Config_Parameters* parameters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parameters_;
  }
  if (parameters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parameters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:Config.parameters)
}

// .Config.Log log = 4;
inline bool Config::has_log() const {
  return this != internal_default_instance() && log_ != NULL;
}
inline void Config::clear_log() {
  if (GetArenaNoVirtual() == NULL && log_ != NULL) {
    delete log_;
  }
  log_ = NULL;
}
inline const ::Config_Log& Config::_internal_log() const {
  return *log_;
}
inline const ::Config_Log& Config::log() const {
  const ::Config_Log* p = log_;
  // @@protoc_insertion_point(field_get:Config.log)
  return p != NULL ? *p : *reinterpret_cast<const ::Config_Log*>(
      &::_Config_Log_default_instance_);
}
inline ::Config_Log* Config::release_log() {
  // @@protoc_insertion_point(field_release:Config.log)
  
  ::Config_Log* temp = log_;
  log_ = NULL;
  return temp;
}
inline ::Config_Log* Config::mutable_log() {
  
  if (log_ == NULL) {
    auto* p = CreateMaybeMessage<::Config_Log>(GetArenaNoVirtual());
    log_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Config.log)
  return log_;
}
inline void Config::set_allocated_log(::Config_Log* log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete log_;
  }
  if (log) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    
  } else {
    
  }
  log_ = log;
  // @@protoc_insertion_point(field_set_allocated:Config.log)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Config_Discovery_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config_Discovery_Type>() {
  return ::Config_Discovery_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_config_2eproto
